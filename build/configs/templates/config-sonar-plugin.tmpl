/* Copyright 2018 EPAM Systems.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the License for the specific language governing permissions and
limitations under the License. */

import hudson.plugins.sonar.*
import hudson.plugins.sonar.model.*
import hudson.tools.*
import hudson.util.Secret
import org.apache.commons.lang.StringUtils
import org.jenkinsci.plugins.plaincredentials.impl.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.CredentialsScope
import com.cloudbees.plugins.credentials.common.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.domains.Domain
import com.cloudbees.plugins.credentials.impl.*

// Sonar plugin configuration
SonarGlobalConfiguration sonarConf = Hudson.instance.getDescriptorByType(SonarGlobalConfiguration.class)
def sonarProperties = new SonarInstallation(
        "Sonar",
        "http://{{ .ServerName }}:{{ .ServerPort }}{{ .ServerPath }}",
  		"{{ .SecretName }}",
  		Secret.fromString(StringUtils.trimToNull("")),
        "5.3",
        "",
  		"",
        new TriggersConfig()
)
sonarConf.setInstallations(sonarProperties)
sonarConf.save()

def sonarDescriptor = Jenkins.instance.getDescriptor("hudson.plugins.sonar.SonarRunnerInstallation")

def sonarRunnerInstaller = new SonarRunnerInstaller("3.1.0.1141")
def installSourceProperty = new InstallSourceProperty([sonarRunnerInstaller])
def sonarRunnerInstance = new SonarRunnerInstallation("SonarQube Scanner", "", [installSourceProperty])

def sonarRunnerInstallations = sonarDescriptor.getInstallations()
sonarRunnerInstallations += sonarRunnerInstance
sonarDescriptor.setInstallations((SonarRunnerInstallation[]) sonarRunnerInstallations)
sonarDescriptor.save()

def sonarDescriptorMsBuild = Jenkins.instance.getDescriptor("hudson.plugins.sonar.MsBuildSQRunnerInstallation")

def sonarRunnerInstallerMsBuild = new MsBuildSonarQubeRunnerInstaller("4.3.1.1372-netcore")
def installSourcePropertyMsBuild = new InstallSourceProperty([sonarRunnerInstallerMsBuild])
def sonarRunnerInstanceMsBuild = new MsBuildSQRunnerInstallation("SonarScannerMSBuild", "", [installSourcePropertyMsBuild])

def sonarRunnerInstallationsMsBuild = sonarDescriptorMsBuild.getInstallations()
sonarRunnerInstallationsMsBuild += sonarRunnerInstanceMsBuild
sonarDescriptorMsBuild.setInstallations((MsBuildSQRunnerInstallation[]) sonarRunnerInstallationsMsBuild)
sonarDescriptorMsBuild.save()